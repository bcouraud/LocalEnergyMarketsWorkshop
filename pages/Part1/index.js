import Slider, { Range,SliderTooltip } from 'rc-slider';
import 'rc-slider/assets/index.css';
import 'bootstrap/dist/css/bootstrap.css';
 // Add this line

 function sumArray(a, b) {
  var c = [];
  for (var i = 0; i < Math.max(a.length, b.length); i++) {
    c.push((a[i] || 0) + (b[i] || 0));
  }
  return c;
}



// for bids
var price1 = 10;
var price2 = 10;
var price3 = 10;
var price4 = 10;
var price5 = 10;
var price6 = 10;
var signprice1 = 1;
var signprice2 = 1;
var signprice3 = 1;
var signprice4 = 1;
var signprice5 = 1;
var signprice6 = 1;

var  NumberCommunityMembers="0";     //NumberofCommunityMembers.innerHTML = NumberCommunityMembers;

var colorA = '#ABE2FB' 
var colorB = '#ABE2FB' 
function diffArray(a, b) {
  var c = [];
  for (var i = 0; i < Math.max(a.length, b.length); i++) {
    c.push((a[i] || 0) - (b[i] || 0));
  }
  return c;
}

// import * as Zoom from "chartjs-plugin-zoom"
//import Hammer from "hammerjs";
//import Zoom from "chartjs-plugin-zoom";

import {Chart, Line} from 'react-chartjs-2';
import React, { useEffect, useRef } from "react";
import { useState } from 'react';

const limitheating = 15
const limitplate = 1
var Delta = 0.05
const PowerCooking = 2000
var tempprofileHeating =[];
for (var i = 0; i <= 1440; i++) {
    tempprofileHeating.push(0);
}

var tempprofileCooking =[];
for (var i = 0; i <= 1440; i++) {
    tempprofileCooking.push(0);
}
const list = [];
for (var i = 0; i <= 1440; i++) {
    list.push(0);
}

var DER_Curve = [];
for (var i = 0; i <= 1440; i++) {
    list.push(0);
}
//import zoomPlugin from 'chartjs-plugin-zoom';
const labelX_30min = ["00:00","00:30","01:00","01:30","02:00","02:30","03:00","03:30","04:00","04:30","05:00","05:30","06:00","06:30","07:00","07:30","08:00","08:30","09:00","09:30","10:00","10:30","11:00","11:30","12:00","12:30","13:00","13:30","14:00","14:30","15:00","15:30","16:00","16:30","17:00","17:30","18:00","18:30","19:00","19:30","20:00","20:30","21:00","21:30","22:00","22:30","23:00","23:30"]
const CO2emissions =["175.3832496","174.2625641","152.6970435","154.3824561","153.1666087","151.6062827","146.5932504","140.2339893","140.7375224","139.8648936","142.5815331","148.8209106","178.1145482","181.0877612","182.4687316","183.1677966","184.0737135","180.8364626","175.8395194","169.7125326","160.3737913","156.75575","148.309599","137.2014475","121.2004819","116.0591074","119.1196102","118.4","124.9227102","133.6866582","146.8076531","160.6879795","155.6844156","172.9414894","176.156038","178.8173677","179.8172943","177.390137","176.75","180.9644755","181.9825352","182.0071531","183.5340116","185.4818591","186.7212864","187.7031746","183.7101449","183.0978441","185.7360269"]

const GridPrice = ["113.4","115.7","114.4","111","110.4","110.4","110.1","105.8","106.5","105.8","108.4","109.7","117.4","117.4","124.7","129.3","150.8","151.7","167.1","161.2","161","161","165.2","167.1","167.1","167.1","158.3","157.5","148.7","143.6","138.3","153.7","319.4","350","350","350","345.8","317.5","151.2","139.6","156.2","146.3","135.2","135.2","118.4","113.2","138.1","138.2"]
var temperature = [];
var temperatureExterieur = [];
const temperatureExterieurbase = 5;
const PowerHeating = 1000
const temperaturebase = 21
var temp = 0
for (var i = 0; i <= 1440; i++) {
    temperature.push(temperaturebase);
   temp = temperatureExterieurbase+10*Math.exp(-1/2*Math.pow((i-1440/2)/200,2))
   temperatureExterieur.push(temp);
}
const temperaturemax = 26
const temperaturemin = 26
var minHeating1 = 0
var minHeating2 = 0
var minHeating3 = 0
var maxHeating1 = 0
var maxHeating2 = 0
var maxHeating3 = 0


var minrangeCooking1 = 0
var maxrangeCooking1 = 0
var minrangeCooking2 = 0
var maxrangeCooking2 = 0
var DC_Heating1 = 10
const PowerPV = 2200*1.3
const PowerWind = 1542*1.3




var timeHeating1a = 0
var timeHeating1b = 10
var timeHeating2a = 0
var timeHeating2b = 0
var timeHeating3a = 0
var timeHeating3b = 0
var timeHeating4a = 0
var timeHeating4b = 0
var TemperatureLimitlow1 = 22
var TemperatureLimitlow2 = 18
var TemperatureLimitlow3 = 18
var TemperatureLimitlow4 = 18


var timeCooking1a = 0
var timeCooking1b = 0
var timeCooking2a = 0
var timeCooking2b = 0
var timeCooking3a = 0
var timeCooking3b = 0

var DurationCooking1 = 0
var DurationCooking2 = 0
var needsfilled = 0


var timeBoiling1a = 0
var Temperaturewater = 35

//EVChange
var minrangeEV1 = 0
var maxrangeEV1 = 0
var minrangeEV2 = 0
var maxrangeEV2 = 0
var EVChargeNeed = 15*1000*60//kWh
var timeimpossiblecharge1 = 0
var timeimpossiblecharge2 = 0


const labelX = ["00:00","00:01","00:02","00:03","00:04","00:05","00:06","00:07","00:08","00:09","00:10","00:11","00:12","00:13","00:14","00:15","00:16","00:17","00:18","00:19","00:20","00:21","00:22","00:23","00:24","00:25","00:26","00:27","00:28","00:29","00:30","00:31","00:32","00:33","00:34","00:35","00:36","00:37","00:38","00:39","00:40","00:41","00:42","00:43","00:44","00:45","00:46","00:47","00:48","00:49","00:50","00:51","00:52","00:53","00:54","00:55","00:56","00:57","00:58","00:59","01:00","01:01","01:02","01:03","01:04","01:05","01:06","01:07","01:08","01:09","01:10","01:11","01:12","01:13","01:14","01:15","01:16","01:17","01:18","01:19","01:20","01:21","01:22","01:23","01:24","01:25","01:26","01:27","01:28","01:29","01:30","01:31","01:32","01:33","01:34","01:35","01:36","01:37","01:38","01:39","01:40","01:41","01:42","01:43","01:44","01:45","01:46","01:47","01:48","01:49","01:50","01:51","01:52","01:53","01:54","01:55","01:56","01:57","01:58","01:59","02:00","02:01","02:02","02:03","02:04","02:05","02:06","02:07","02:08","02:09","02:10","02:11","02:12","02:13","02:14","02:15","02:16","02:17","02:18","02:19","02:20","02:21","02:22","02:23","02:24","02:25","02:26","02:27","02:28","02:29","02:30","02:31","02:32","02:33","02:34","02:35","02:36","02:37","02:38","02:39","02:40","02:41","02:42","02:43","02:44","02:45","02:46","02:47","02:48","02:49","02:50","02:51","02:52","02:53","02:54","02:55","02:56","02:57","02:58","02:59","03:00","03:01","03:02","03:03","03:04","03:05","03:06","03:07","03:08","03:09","03:10","03:11","03:12","03:13","03:14","03:15","03:16","03:17","03:18","03:19","03:20","03:21","03:22","03:23","03:24","03:25","03:26","03:27","03:28","03:29","03:30","03:31","03:32","03:33","03:34","03:35","03:36","03:37","03:38","03:39","03:40","03:41","03:42","03:43","03:44","03:45","03:46","03:47","03:48","03:49","03:50","03:51","03:52","03:53","03:54","03:55","03:56","03:57","03:58","03:59","04:00","04:01","04:02","04:03","04:04","04:05","04:06","04:07","04:08","04:09","04:10","04:11","04:12","04:13","04:14","04:15","04:16","04:17","04:18","04:19","04:20","04:21","04:22","04:23","04:24","04:25","04:26","04:27","04:28","04:29","04:30","04:31","04:32","04:33","04:34","04:35","04:36","04:37","04:38","04:39","04:40","04:41","04:42","04:43","04:44","04:45","04:46","04:47","04:48","04:49","04:50","04:51","04:52","04:53","04:54","04:55","04:56","04:57","04:58","04:59","05:00","05:01","05:02","05:03","05:04","05:05","05:06","05:07","05:08","05:09","05:10","05:11","05:12","05:13","05:14","05:15","05:16","05:17","05:18","05:19","05:20","05:21","05:22","05:23","05:24","05:25","05:26","05:27","05:28","05:29","05:30","05:31","05:32","05:33","05:34","05:35","05:36","05:37","05:38","05:39","05:40","05:41","05:42","05:43","05:44","05:45","05:46","05:47","05:48","05:49","05:50","05:51","05:52","05:53","05:54","05:55","05:56","05:57","05:58","05:59","06:00","06:01","06:02","06:03","06:04","06:05","06:06","06:07","06:08","06:09","06:10","06:11","06:12","06:13","06:14","06:15","06:16","06:17","06:18","06:19","06:20","06:21","06:22","06:23","06:24","06:25","06:26","06:27","06:28","06:29","06:30","06:31","06:32","06:33","06:34","06:35","06:36","06:37","06:38","06:39","06:40","06:41","06:42","06:43","06:44","06:45","06:46","06:47","06:48","06:49","06:50","06:51","06:52","06:53","06:54","06:55","06:56","06:57","06:58","06:59","07:00","07:01","07:02","07:03","07:04","07:05","07:06","07:07","07:08","07:09","07:10","07:11","07:12","07:13","07:14","07:15","07:16","07:17","07:18","07:19","07:20","07:21","07:22","07:23","07:24","07:25","07:26","07:27","07:28","07:29","07:30","07:31","07:32","07:33","07:34","07:35","07:36","07:37","07:38","07:39","07:40","07:41","07:42","07:43","07:44","07:45","07:46","07:47","07:48","07:49","07:50","07:51","07:52","07:53","07:54","07:55","07:56","07:57","07:58","07:59","08:00","08:01","08:02","08:03","08:04","08:05","08:06","08:07","08:08","08:09","08:10","08:11","08:12","08:13","08:14","08:15","08:16","08:17","08:18","08:19","08:20","08:21","08:22","08:23","08:24","08:25","08:26","08:27","08:28","08:29","08:30","08:31","08:32","08:33","08:34","08:35","08:36","08:37","08:38","08:39","08:40","08:41","08:42","08:43","08:44","08:45","08:46","08:47","08:48","08:49","08:50","08:51","08:52","08:53","08:54","08:55","08:56","08:57","08:58","08:59","09:00","09:01","09:02","09:03","09:04","09:05","09:06","09:07","09:08","09:09","09:10","09:11","09:12","09:13","09:14","09:15","09:16","09:17","09:18","09:19","09:20","09:21","09:22","09:23","09:24","09:25","09:26","09:27","09:28","09:29","09:30","09:31","09:32","09:33","09:34","09:35","09:36","09:37","09:38","09:39","09:40","09:41","09:42","09:43","09:44","09:45","09:46","09:47","09:48","09:49","09:50","09:51","09:52","09:53","09:54","09:55","09:56","09:57","09:58","09:59","10:00","10:01","10:02","10:03","10:04","10:05","10:06","10:07","10:08","10:09","10:10","10:11","10:12","10:13","10:14","10:15","10:16","10:17","10:18","10:19","10:20","10:21","10:22","10:23","10:24","10:25","10:26","10:27","10:28","10:29","10:30","10:31","10:32","10:33","10:34","10:35","10:36","10:37","10:38","10:39","10:40","10:41","10:42","10:43","10:44","10:45","10:46","10:47","10:48","10:49","10:50","10:51","10:52","10:53","10:54","10:55","10:56","10:57","10:58","10:59","11:00","11:01","11:02","11:03","11:04","11:05","11:06","11:07","11:08","11:09","11:10","11:11","11:12","11:13","11:14","11:15","11:16","11:17","11:18","11:19","11:20","11:21","11:22","11:23","11:24","11:25","11:26","11:27","11:28","11:29","11:30","11:31","11:32","11:33","11:34","11:35","11:36","11:37","11:38","11:39","11:40","11:41","11:42","11:43","11:44","11:45","11:46","11:47","11:48","11:49","11:50","11:51","11:52","11:53","11:54","11:55","11:56","11:57","11:58","11:59","12:00","12:01","12:02","12:03","12:04","12:05","12:06","12:07","12:08","12:09","12:10","12:11","12:12","12:13","12:14","12:15","12:16","12:17","12:18","12:19","12:20","12:21","12:22","12:23","12:24","12:25","12:26","12:27","12:28","12:29","12:30","12:31","12:32","12:33","12:34","12:35","12:36","12:37","12:38","12:39","12:40","12:41","12:42","12:43","12:44","12:45","12:46","12:47","12:48","12:49","12:50","12:51","12:52","12:53","12:54","12:55","12:56","12:57","12:58","12:59","13:00","13:01","13:02","13:03","13:04","13:05","13:06","13:07","13:08","13:09","13:10","13:11","13:12","13:13","13:14","13:15","13:16","13:17","13:18","13:19","13:20","13:21","13:22","13:23","13:24","13:25","13:26","13:27","13:28","13:29","13:30","13:31","13:32","13:33","13:34","13:35","13:36","13:37","13:38","13:39","13:40","13:41","13:42","13:43","13:44","13:45","13:46","13:47","13:48","13:49","13:50","13:51","13:52","13:53","13:54","13:55","13:56","13:57","13:58","13:59","14:00","14:01","14:02","14:03","14:04","14:05","14:06","14:07","14:08","14:09","14:10","14:11","14:12","14:13","14:14","14:15","14:16","14:17","14:18","14:19","14:20","14:21","14:22","14:23","14:24","14:25","14:26","14:27","14:28","14:29","14:30","14:31","14:32","14:33","14:34","14:35","14:36","14:37","14:38","14:39","14:40","14:41","14:42","14:43","14:44","14:45","14:46","14:47","14:48","14:49","14:50","14:51","14:52","14:53","14:54","14:55","14:56","14:57","14:58","14:59","15:00","15:01","15:02","15:03","15:04","15:05","15:06","15:07","15:08","15:09","15:10","15:11","15:12","15:13","15:14","15:15","15:16","15:17","15:18","15:19","15:20","15:21","15:22","15:23","15:24","15:25","15:26","15:27","15:28","15:29","15:30","15:31","15:32","15:33","15:34","15:35","15:36","15:37","15:38","15:39","15:40","15:41","15:42","15:43","15:44","15:45","15:46","15:47","15:48","15:49","15:50","15:51","15:52","15:53","15:54","15:55","15:56","15:57","15:58","15:59","16:00","16:01","16:02","16:03","16:04","16:05","16:06","16:07","16:08","16:09","16:10","16:11","16:12","16:13","16:14","16:15","16:16","16:17","16:18","16:19","16:20","16:21","16:22","16:23","16:24","16:25","16:26","16:27","16:28","16:29","16:30","16:31","16:32","16:33","16:34","16:35","16:36","16:37","16:38","16:39","16:40","16:41","16:42","16:43","16:44","16:45","16:46","16:47","16:48","16:49","16:50","16:51","16:52","16:53","16:54","16:55","16:56","16:57","16:58","16:59","17:00","17:01","17:02","17:03","17:04","17:05","17:06","17:07","17:08","17:09","17:10","17:11","17:12","17:13","17:14","17:15","17:16","17:17","17:18","17:19","17:20","17:21","17:22","17:23","17:24","17:25","17:26","17:27","17:28","17:29","17:30","17:31","17:32","17:33","17:34","17:35","17:36","17:37","17:38","17:39","17:40","17:41","17:42","17:43","17:44","17:45","17:46","17:47","17:48","17:49","17:50","17:51","17:52","17:53","17:54","17:55","17:56","17:57","17:58","17:59","18:00","18:01","18:02","18:03","18:04","18:05","18:06","18:07","18:08","18:09","18:10","18:11","18:12","18:13","18:14","18:15","18:16","18:17","18:18","18:19","18:20","18:21","18:22","18:23","18:24","18:25","18:26","18:27","18:28","18:29","18:30","18:31","18:32","18:33","18:34","18:35","18:36","18:37","18:38","18:39","18:40","18:41","18:42","18:43","18:44","18:45","18:46","18:47","18:48","18:49","18:50","18:51","18:52","18:53","18:54","18:55","18:56","18:57","18:58","18:59","19:00","19:01","19:02","19:03","19:04","19:05","19:06","19:07","19:08","19:09","19:10","19:11","19:12","19:13","19:14","19:15","19:16","19:17","19:18","19:19","19:20","19:21","19:22","19:23","19:24","19:25","19:26","19:27","19:28","19:29","19:30","19:31","19:32","19:33","19:34","19:35","19:36","19:37","19:38","19:39","19:40","19:41","19:42","19:43","19:44","19:45","19:46","19:47","19:48","19:49","19:50","19:51","19:52","19:53","19:54","19:55","19:56","19:57","19:58","19:59","20:00","20:01","20:02","20:03","20:04","20:05","20:06","20:07","20:08","20:09","20:10","20:11","20:12","20:13","20:14","20:15","20:16","20:17","20:18","20:19","20:20","20:21","20:22","20:23","20:24","20:25","20:26","20:27","20:28","20:29","20:30","20:31","20:32","20:33","20:34","20:35","20:36","20:37","20:38","20:39","20:40","20:41","20:42","20:43","20:44","20:45","20:46","20:47","20:48","20:49","20:50","20:51","20:52","20:53","20:54","20:55","20:56","20:57","20:58","20:59","21:00","21:01","21:02","21:03","21:04","21:05","21:06","21:07","21:08","21:09","21:10","21:11","21:12","21:13","21:14","21:15","21:16","21:17","21:18","21:19","21:20","21:21","21:22","21:23","21:24","21:25","21:26","21:27","21:28","21:29","21:30","21:31","21:32","21:33","21:34","21:35","21:36","21:37","21:38","21:39","21:40","21:41","21:42","21:43","21:44","21:45","21:46","21:47","21:48","21:49","21:50","21:51","21:52","21:53","21:54","21:55","21:56","21:57","21:58","21:59","22:00","22:01","22:02","22:03","22:04","22:05","22:06","22:07","22:08","22:09","22:10","22:11","22:12","22:13","22:14","22:15","22:16","22:17","22:18","22:19","22:20","22:21","22:22","22:23","22:24","22:25","22:26","22:27","22:28","22:29","22:30","22:31","22:32","22:33","22:34","22:35","22:36","22:37","22:38","22:39","22:40","22:41","22:42","22:43","22:44","22:45","22:46","22:47","22:48","22:49","22:50","22:51","22:52","22:53","22:54","22:55","22:56","22:57","22:58","22:59","23:00","23:01","23:02","23:03","23:04","23:05","23:06","23:07","23:08","23:09","23:10","23:11","23:12","23:13","23:14","23:15","23:16","23:17","23:18","23:19","23:20","23:21","23:22","23:23","23:24","23:25","23:26","23:27","23:28","23:29","23:30","23:31","23:32","23:33","23:34","23:35","23:36","23:37","23:38","23:39","23:40","23:41","23:42","23:43","23:44","23:45","23:46","23:47","23:48","23:49","23:50","23:51","23:52","23:53","23:54","23:55","23:56","23:57","23:58","23:59"]
//import 'hammerjs/src/hammer.js';
// import 'chartjs-plugin-zoom/dist/chartjs-plugin-zoom.min.js'
// import zoomPlugin from 'chartjs-plugin-zoom';
var reload1 =0
var reload2 =0
var reload3 =0
var reload4 =0

var power_30min = []
for (var i = 0; i <= 24*2; i++) {
    power_30min.push(0);
}


// // console.log(reload)
if (typeof myLine === 'object' ) {
   if (reload1 ===0){
       myLine.destroy()
       reload1 = 1
   }
    //    // console.log("graph already exist")
}else{
//    // console.log("graph has been deleted")
}
if (typeof myLineheating === 'object' ) {
    if (reload2 ===0){
        myLineheating.destroy()
        reload2 = 1
    }
        // // console.log("graph already exist")
 }else{
    // // console.log("graph has been deleted")
 }

 if (typeof myLine30min === 'object' ) {
    if (reload3 ===0){
        myLine30min.destroy()
        reload3 = 1
    }
        // // console.log("graph already exist")
 }else{
    // // console.log("graph has been deleted")
 }

 if (typeof myLine30minCommunity === 'object' ) {
  if (reload4 ===0){
    myLine30minCommunity.destroy()
      reload4 = 1
  }
      // // console.log("graph already exist")
}else{
  // // console.log("graph has been deleted")
}

var  DER_30min = list



const  stylevertical = { float: 'left', width: 100, height: 250, marginBottom:80, marginLeft: 10 };

var importation = []
var DER_Curve = list;
// Core Components
function Example() {
 //on supprime le graph s'il existe
 if (typeof display === 'object' ) {
  display.innerHTML = ""
  }

  if (typeof displayNeeds === 'object' ) {
    displayNeeds.innerHTML = ""
    }
    if (typeof displaycost === 'object' ) {
      displaycost.innerHTML = ""
      }
      if (typeof displaycommunitymembers === 'object' ) {
        displaycommunitymembers.innerHTML = ""
        }
      if (typeof NumberofCommunityMembers === 'object' ) {
        NumberofCommunityMembers.innerHTML = ""
        }

      
    
  var consumption_30minCommunity = []
    for (var i = 0; i <= 24*2; i++) {
      consumption_30minCommunity.push(0);
}
var production_30minCommunity= []
for (var i = 0; i <= 24*2; i++) {
  production_30minCommunity.push(0);
}
  

 const data_wind = ["0.374880884","0.372403278","0.349533067","0.402896893","0.374880884","0.372403278","0.362111683","0.326662855","0.319039451","0.308747856","0.298646846","0.298646846","0.280922432","0.278254241","0.31637126","0.270630837","0.275776634","0.283400038","0.280922432","0.270630837","0.26815323","0.250428816","0.319039451","0.30627025","0.311416047","0.273299028","0.260529827","0.26815323","0.265675624","0.252906423","0.291023442","0.301124452","0.291023442","0.311416047","0.311416047","0.288545836","0.298646846","0.326662855","0.334286259","0.298646846","0.349533067","0.334286259","0.344387269","0.336763865","0.346864875","0.341909663","0.349533067","0.352010673","0.308747856","0.329140461","0.336763865","0.346864875","0.31637126","0.334286259","0.308747856","0.308747856","0.31637126","0.308747856","0.326662855","0.339241471","0.319039451","0.29616924","0.323994664","0.35715647","0.329140461","0.344387269","0.336763865","0.341909663","0.359634077","0.308747856","0.308747856","0.321517057","0.331618067","0.326662855","0.323994664","0.336763865","0.35715647","0.326662855","0.29616924","0.336763865","0.323994664","0.329140461","0.311416047","0.308747856","0.334286259","0.369735087","0.339241471","0.339241471","0.323994664","0.321517057","0.319039451","0.336763865","0.336763865","0.372403278","0.359634077","0.362111683","0.341909663","0.349533067","0.352010673","0.352010673","0.397751096","0.36725748","0.346864875","0.349533067","0.362111683","0.323994664","0.336763865","0.349533067","0.303792643","0.273299028","0.293501048","0.311416047","0.341909663","0.397751096","0.402896893","0.397751096","0.382504288","0.354488279","0.380026682","0.334286259","0.35715647","0.331618067","0.346864875","0.36725748","0.344387269","0.352010673","0.336763865","0.412997904","0.425767105","0.410520297","0.39527349","0.420621307","0.428244711","0.441013913","0.453592529","0.374880884","0.466361731","0.400228702","0.407852106","0.392605298","0.369735087","0.372403278","0.344387269","0.410520297","0.438345721","0.402896893","0.364779874","0.428244711","0.402896893","0.430722318","0.349533067","0.433390509","0.382504288","0.339241471","0.438345721","0.354488279","0.362111683","0.359634077","0.402896893","0.4053745","0.377358491","0.425767105","0.428244711","0.486754336","0.479130932","0.428244711","0.354488279","0.39527349","0.39527349","0.372403278","0.441013913","0.423098914","0.369735087","0.407852106","0.35715647","0.402896893","0.443491519","0.448637317","0.410520297","0.372403278","0.369735087","0.410520297","0.344387269","0.392605298","0.412997904","0.39527349","0.392605298","0.352010673","0.412997904","0.35715647","0.435868115","0.382504288","0.392605298","0.387650086","0.377358491","0.372403278","0.334286259","0.334286259","0.384981894","0.354488279","0.410520297","0.377358491","0.364779874","0.349533067","0.311416047","0.323994664","0.354488279","0.36725748","0.372403278","0.372403278","0.341909663","0.321517057","0.346864875","0.374880884","0.341909663","0.341909663","0.374880884","0.39527349","0.36725748","0.336763865","0.35715647","0.362111683","0.384981894","0.352010673","0.372403278","0.336763865","0.323994664","0.359634077","0.384981894","0.352010673","0.339241471","0.31637126","0.359634077","0.36725748","0.362111683","0.321517057","0.308747856","0.372403278","0.346864875","0.301124452","0.29616924","0.308747856","0.336763865","0.311416047","0.29616924","0.326662855","0.308747856","0.362111683","0.285877644","0.354488279","0.313893654","0.339241471","0.29616924","0.326662855","0.301124452","0.329140461","0.319039451","0.334286259","0.313893654","0.278254241","0.293501048","0.319039451","0.319039451","0.308747856","0.319039451","0.392605298","0.346864875","0.36725748","0.377358491","0.380026682","0.418143701","0.4053745","0.438345721","0.461215933","0.41547551","0.41547551","0.4053745","0.448637317","0.400228702","0.387650086","0.397751096","0.438345721","0.448637317","0.50447875","0.438345721","0.41547551","0.397751096","0.387650086","0.400228702","0.433390509","0.4053745","0.397751096","0.420621307","0.352010673","0.453592529","0.445969125","0.397751096","0.359634077","0.39527349","0.4053745","0.420621307","0.400228702","0.423098914","0.410520297","0.392605298","0.41547551","0.341909663","0.329140461","0.349533067","0.412997904","0.372403278","0.412997904","0.433390509","0.445969125","0.380026682","0.377358491","0.362111683","0.372403278","0.344387269","0.407852106","0.36725748","0.384981894","0.412997904","0.352010673","0.430722318","0.4053745","0.364779874","0.397751096","0.39527349","0.362111683","0.362111683","0.349533067","0.349533067","0.36725748","0.420621307","0.392605298","0.344387269","0.359634077","0.36725748","0.35715647","0.364779874","0.380026682","0.326662855","0.334286259","0.359634077","0.372403278","0.4053745","0.336763865","0.321517057","0.298646846","0.311416047","0.326662855","0.313893654","0.311416047","0.31637126","0.311416047","0.278254241","0.301124452","0.26815323","0.301124452","0.280922432","0.252906423","0.235182009","0.222412807","0.245283019","0.227558605","0.242805413","0.240137221","0.202020202","0.265675624","0.255384029","0.242805413","0.255384029","0.245283019","0.273299028","0.270630837","0.280922432","0.291023442","0.288545836","0.250428816","0.255384029","0.25805222","0.273299028","0.25805222","0.255384029","0.252906423","0.25805222","0.265675624","0.247760625","0.265675624","0.280922432","0.260529827","0.265675624","0.285877644","0.313893654","0.293501048","0.255384029","0.250428816","0.275776634","0.255384029","0.240137221","0.278254241","0.260529827","0.245283019","0.247760625","0.250428816","0.252906423","0.265675624","0.245283019","0.250428816","0.26815323","0.273299028","0.255384029","0.240137221","0.255384029","0.240137221","0.25805222","0.247760625","0.237659615","0.207166","0.227558605","0.263007433","0.247760625","0.247760625","0.224890414","0.235182009","0.237659615","0.212311797","0.207166","0.19706499","0.219935201","0.222412807","0.247760625","0.263007433","0.247760625","0.232513817","0.237659615","0.265675624","0.301124452","0.291023442","0.303792643","0.323994664","0.311416047","0.326662855","0.29616924","0.321517057","0.326662855","0.319039451","0.326662855","0.344387269","0.392605298","0.374880884","0.313893654","0.301124452","0.278254241","0.291023442","0.275776634","0.270630837","0.265675624","0.245283019","0.227558605","0.260529827","0.235182009","0.230036211","0.263007433","0.283400038","0.308747856","0.36725748","0.377358491","0.410520297","0.387650086","0.402896893","0.423098914","0.402896893","0.412997904","0.384981894","0.392605298","0.407852106","0.39527349","0.377358491","0.390127692","0.420621307","0.418143701","0.410520297","0.392605298","0.377358491","0.430722318","0.400228702","0.369735087","0.430722318","0.423098914","0.41547551","0.418143701","0.45626072","0.443491519","0.410520297","0.402896893","0.380026682","0.407852106","0.410520297","0.41547551","0.390127692","0.349533067","0.471507528","0.359634077","0.397751096","0.382504288","0.443491519","0.443491519","0.435868115","0.420621307","0.489231942","0.496855346","0.476462741","0.499332952","0.540118163","0.384981894","0.410520297","0.443491519","0.382504288","0.45626072","0.418143701","0.484086144","0.463884124","0.519725557","0.428244711","0.567943587","0.438345721","0.509624547","0.448637317","0.491709548","0.506956356","0.603583","0.486754336","0.636554221","0.565465981","0.562988374","0.651801029","0.70268725","0.705164856","0.595959596","0.616352201","0.730703259","0.573089384","0.649323423","0.527348961","0.639222413","0.654469221","0.61368401","0.61368401","0.634076615","0.517247951","0.649323423","0.491709548","0.496855346","0.578235182","0.565465981","0.687440442","0.542595769","0.527348961","0.562988374","0.623975605","0.537449971","0.540118163","0.778921288","0.654469221","0.565465981","0.458738327","0.438345721","0.412997904","0.598437202","0.529826568","0.595959596","0.567943587","0.61368401","0.659424433","0.750905279","0.664570231","0.707833047","0.588336192","0.750905279","0.644177625","0.669716028","0.567943587","0.70268725","0.745950067","0.738326663","0.705164856","0.662092624","0.79169049","0.621307414","0.654469221","0.700209644","0.773775491","0.636554221","0.71278826","0.573089384","0.51457976","0.641700019","0.621307414","0.677339432","0.677339432","0.720411664","0.725557461","0.740804269","0.738326663","0.656946827","0.725557461","0.700209644","0.71278826","0.697541452","0.649323423","0.626453211","0.641700019","0.697541452","0.646845817","0.677339432","0.537449971","0.550219173","0.771297885","0.878025538","0.773775491","0.725557461","0.814560701","0.733180865","0.913664951","0.773775491","0.763674481","0.667047837","0.540118163","0.621307414","0.817038308","0.595959596","0.590813798","0.756051077","0.723079855","0.562988374","0.659424433","0.560320183","0.502001144","0.740804269","0.827139318","0.750905279","0.626453211","0.50447875","0.799313894","0.773775491","0.697541452","0.817038308","0.855155327","0.69258624","0.738326663","0.710310654","0.697541452","0.69258624","1","0.850009529","0.822184105","0.81189251","0.649323423","0.750905279","0.756051077","0.809414904","0.649323423","0.689918048","0.733180865","0.590813798","0.618829808","0.636554221","0.763674481","0.71278826","0.524871355","0.641700019","0.672193634","0.740804269","0.745950067","0.51457976","0.748427673","0.578235182","0.542595769","0.595959596","0.725557461","0.799313894","0.527348961","0.430722318","0.542595769","0.723079855","0.728035068","0.867924528","0.827139318","0.547741567","0.59348199","0.669716028","0.654469221","0.705164856","0.697541452","0.534972365","0.573089384","0.458738327","0.875547932","0.799313894","0.862778731","0.865256337","0.822184105","0.903373356","0.778921288","0.664570231","0.674671241","0.588336192","0.753573471","0.725557461","0.644177625","0.695445016","0.664570231","0.649323423","0.878025538","0.649323423","0.651801029","0.745950067","0.656946827","0.664570231","0.55536497","0.720411664","0.517247951","0.448637317","0.557842577","0.445969125","0.631599009","0.59348199","0.534972365","0.730703259","0.684962836","0.852677721","0.707833047","0.611206404","0.738326663","0.634076615","0.519725557","0.346864875","0.664570231","0.506956356","0.664570231","0.720411664","0.715456451","0.667047837","0.578235182","0.583190395","0.484086144","0.771297885","0.728035068","0.91099676","0.70268725","0.898418144","0.796645702","0.565465981","0.550219173","0.578235182","0.425767105","0.545073375","0.534972365","0.69258624","0.468839337","0.423098914","0.51457976","0.435868115","0.603583","0.550219173","0.595959596","0.51457976","0.506956356","0.81189251","0.649323423","0.684962836","0.608728797","0.750905279","0.814560701","0.847531923","0.771297885","0.700209644","0.735658472","0.659424433","0.806937298","0.710310654","0.634076615","0.720411664","0.875547932","0.646845817","0.784067086","0.79169049","0.697541452","0.707833047","0.875547932","0.776443682","0.667047837","0.700209644","0.583190395","0.524871355","0.621307414","0.626453211","0.608728797","0.583190395","0.898418144","0.776443682","0.837430913","0.728035068","0.743281875","0.707833047","0.756051077","0.885648942","0.715456451","0.763674481","0.649323423","0.585858586","0.679817038","0.428244711","0.700209644","0.845054317","0.847531923","0.776443682","0.611206404","0.725557461","0.784067086","0.776443682","0.651801029","0.547741567","0.433390509","0.590813798","0.677339432","0.819515914","0.70268725","0.867924528","0.951781971","0.857632933","0.806937298","0.562988374","0.565465981","0.656946827","0.639222413","0.583190395","0.621307414","0.733180865","0.857632933","0.603583","0.606060606","0.646845817","0.758528683","0.832285115","0.723079855","0.606060606","0.651801029","0.781398895","0.669716028","0.578235182","0.768820278","0.69258624","0.654469221","0.631599009","0.458738327","0.618829808","0.8017915","0.817038308","0.659424433","0.667047837","0.453592529","0.509624547","0.776443682","0.839908519","0.611206404","0.519725557","0.672193634","0.850009529","0.827139318","0.860301124","0.959405374","0.689918048","0.728035068","0.590813798","0.387650086","0.430722318","0.50447875","0.654469221","0.90089575","0.743281875","0.601105394","0.636554221","0.433390509","0.433390509","0.496855346","0.639222413","0.639222413","0.552696779","0.420621307","0.496855346","0.720411664","0.862778731","0.634076615","0.603583","0.756051077","0.733180865","0.682294645","0.51457976","0.585858586","0.524871355","0.410520297","0.689918048","0.618829808","0.595959596","0.733180865","0.662092624","0.565465981","0.817038308","0.773775491","0.69258624","0.550219173","0.697541452","0.540118163","0.580712788","0.61368401","0.664570231","0.512102154","0.636554221","0.865256337","0.98989899","0.735658472","0.682294645","0.608728797","0.659424433","0.664570231","0.687440442","0.679817038","0.313893654","0.430722318","0.644177625","0.667047837","0.646845817","0.588336192","0.710310654","0.796645702","0.603583","0.618829808","0.69258624","0.860301124","0.654469221","0.631599009","0.654469221","0.575566991","0.532494759","0.659424433","0.707833047","0.733180865","0.753573471","0.837430913","0.567943587","0.656946827","0.583190395","0.59348199","0.745950067","0.763674481","0.534972365","0.471507528","0.656946827","0.626453211","0.626453211","0.710310654","0.69258624","0.979607395","0.773775491","0.697541452","0.677339432","0.567943587","0.804269106","0.69258624","0.598437202","0.527348961","0.618829808","0.766152087","0.575566991","0.575566991","0.61368401","0.565465981","0.621307414","0.567943587","0.560320183","0.499332952","0.540118163","0.895749952","0.616352201","0.723079855","0.69258624","0.819515914","0.756051077","0.750905279","0.590813798","0.562988374","0.583190395","0.461215933","0.473985134","0.423098914","0.49437774","0.710310654","0.489231942","0.479130932","0.534972365","0.601105394","0.626453211","0.888126549","0.684962836","0.794168096","0.710310654","0.540118163","0.771297885","0.631599009","0.682294645","0.626453211","0.771297885","0.669716028","0.822184105","0.720411664","0.768820278","0.860301124","0.598437202","0.583190395","0.499332952","0.69258624","0.618829808","0.542595769","0.621307414","0.598437202","0.700209644","0.850009529","0.745950067","0.717934058","0.756051077","0.829807509","0.623975605","0.484086144","0.532494759","0.529826568","0.519725557","0.601105394","0.659424433","0.468839337","0.542595769","0.479130932","0.540118163","0.715456451","0.512102154","0.527348961","0.479130932","0.664570231","0.532494759","0.542595769","0.590813798","0.570611778","0.697541452","0.728035068","0.672193634","0.618829808","0.453592529","0.631599009","0.618829808","0.486754336","0.61368401","0.700209644","0.639222413","0.700209644","0.628930818","0.55536497","0.669716028","0.479130932","0.707833047","0.750905279","0.733180865","0.552696779","0.481608538","0.583190395","0.565465981","0.669716028","0.552696779","0.651801029","0.649323423","0.506956356","0.491709548","0.542595769","0.601105394","0.636554221","0.522203164","0.588336192","0.433390509","0.481608538","0.590813798","0.588336192","0.461215933","0.606060606","0.590813798","0.534972365","0.639222413","0.517247951","0.484086144","0.445969125","0.453592529","0.524871355","0.534972365","0.489231942","0.481608538","0.412997904","0.374880884","0.50447875","0.473985134","0.461215933","0.428244711","0.382504288","0.486754336","0.506956356","0.458738327","0.372403278","0.425767105","0.420621307","0.451114923","0.410520297","0.407852106","0.458738327","0.428244711","0.484086144","0.372403278","0.448637317","0.448637317","0.374880884","0.380026682","0.382504288","0.341909663","0.313893654","0.329140461","0.323994664","0.331618067","0.380026682","0.372403278","0.36725748","0.341909663","0.400228702","0.423098914","0.402896893","0.374880884","0.39527349","0.377358491","0.529826568","0.827139318","0.573089384","0.425767105","0.45626072","0.428244711","0.552696779","0.69258624","0.8017915","0.707833047","0.705164856","0.598437202","0.585858586","0.839908519","0.664570231","0.608728797","0.634076615","0.573089384","0.557842577","0.486754336","0.519725557","0.618829808","0.570611778","0.697541452","0.651801029","0.51457976","0.616352201","0.562988374","0.756051077","0.781398895","0.684962836","0.547741567","0.656946827","0.491709548","0.626453211","0.567943587","0.695063846","0.524871355","0.608728797","0.575566991","0.794168096","0.799313894","0.720411664","0.725557461","0.641700019","0.733180865","0.659424433","0.664570231","0.575566991","0.621307414","0.639222413","0.628930818","0.707833047","0.750905279","0.636554221","0.70268725","0.662092624","0.562988374","0.664570231","0.644177625","0.768820278","0.603583","0.583190395","0.547741567","0.61368401","0.695063846","0.687440442","0.687440442","0.570611778","0.682294645","0.784067086","0.590813798","0.641700019","0.687440442","0.829807509","0.763674481","0.616352201","0.707833047","0.753573471","0.786544692","0.700209644","0.717934058","0.659424433","0.763674481","0.616352201","0.664570231","0.639222413","0.730703259","0.822184105","0.796645702","0.855155327","0.753573471","0.796645702","0.707833047","0.753573471","0.70268725","0.748427673","0.552696779","0.580712788","0.634076615","0.763674481","0.626453211","0.646845817","0.45626072","0.689918048","0.855155327","0.870402135","0.8017915","0.570611778","0.491709548","0.733180865","0.628930818","0.684962836","0.847531923","0.883171336","0.974652182","0.931389365","0.756051077","0.748427673","0.705164856","0.728035068","0.664570231","0.611206404","0.603583","0.662092624","0.773775491","0.71278826","0.745950067","0.588336192","0.636554221","0.750905279","0.710310654","0.70268725","0.623975605","0.715456451","0.669716028","0.750905279","0.672193634","0.664570231","0.659424433","0.697541452","0.738326663","0.771297885","0.753573471","0.748427673","0.540118163","0.789022298","0.740804269","0.697541452","0.603583","0.745950067","0.669716028","0.862778731","0.806937298","0.789022298","0.771297885","0.781398895","0.723079855","0.672193634","0.656946827","0.687440442","0.717934058","0.697541452","0.745950067","0.662092624","0.776443682","0.618829808","0.573089384","0.745950067","0.70268725","0.664570231","0.684962836","0.580712788","0.601105394","0.550219173","0.557842577","0.537449971","0.55536497","0.707833047","0.567943587","0.534972365","0.585858586","0.618829808","0.547741567","0.489231942","0.471507528","0.623975605","0.573089384","0.550219173","0.55536497","0.595959596","0.55536497","0.448637317","0.542595769","0.534972365","0.603583","0.626453211","0.654469221","0.557842577","0.550219173","0.674671241","0.580712788","0.639222413","0.71278826","0.778921288","0.730703259","0.616352201","0.547741567","0.512102154","0.542595769","0.552696779","0.623975605","0.557842577","0.473985134","0.588336192","0.689918048","0.616352201","0.580712788","0.585858586","0.580712788","0.590813798","0.700209644","0.753573471","0.695063846","0.662092624","0.606060606","0.646845817","0.634076615","0.476462741","0.537449971","0.552696779","0.545073375","0.560320183","0.570611778","0.641700019","0.697541452","0.522203164","0.557842577","0.667047837","0.59348199","0.425767105","0.506956356","0.517247951","0.651801029","0.628930818","0.69258624","0.621307414","0.761196874","0.595959596","0.552696779","0.682294645","0.651801029","0.631599009","0.672193634","0.542595769","0.49437774","0.532494759","0.529826568","0.527348961","0.529826568","0.532494759","0.491709548","0.659424433","0.519725557","0.45626072","0.509624547","0.448637317","0.481608538","0.489231942","0.595959596","0.425767105","0.461215933","0.527348961","0.496855346","0.552696779","0.580712788","0.590813798","0.545073375","0.45626072","0.517247951","0.476462741","0.486754336","0.458738327","0.506956356","0.420621307","0.468839337","0.529826568","0.580712788","0.512102154","0.461215933","0.430722318","0.445969125","0.580712788","0.476462741","0.570611778"]
  const  data_solaire


 
 var dataplates = [];


 var count1 = Math.random()*(limitplate - 1) + 0
 // console.log(count1)
 var count2 = 0
 var valeur = 0
 for (var i = 0; i <= 1440; i++) {
   if(count1 >= limitplate){
    valeur = Math.abs(valeur-1)
    count1 = 0
   }
   dataplates.push(valeur);
   count1+=1
 }

  //myLine.destroy()
  //var elementExists = document.getElementById("myLine");
  const { createSliderWithTooltip } = Slider;
  const Range = createSliderWithTooltip(Slider.Range);
  const { Handle } = Slider;

  const profile_null = list
  var CookingPlateLoadCurve = list
  //EVChange
  var EVLoadCurve = list
  var HeatingLoadCurve = list


var LoadConsumptiontotal = list

  const UpdateCooking1 = (e) => {

     minrangeCooking1 = Math.min(Number(e[0]),Number(e[1]))
     maxrangeCooking1 = Math.max(Number(e[0]),Number(e[1]))

    updategraphCooking(1)    
  }

  const UpdateCooking2 = (e) => {

    minrangeCooking2 = Math.min(Number(e[0]),Number(e[1]))
    maxrangeCooking2 = Math.max(Number(e[0]),Number(e[1]))

   updategraphCooking(2)    
 }

  //EVChange
 const UpdateEV1 = (e) => {
  minrangeEV1 = Math.min(Number(e[0]),Number(e[1]))
  maxrangeEV1 = Math.max(Number(e[0]),Number(e[1]))
  // console.log(minrangeEV1)
  // console.log(maxrangeEV1)
  
 updategraphEV(1)    
}
const UpdateEV2 = (e) => {
  minrangeEV2 = Math.min(Number(e[0]),Number(e[1]))
  maxrangeEV2 = Math.max(Number(e[0]),Number(e[1]))
 updategraphEV(2)    
}






const UpdateHeating1 = (e,id) => {

    minHeating1 = Math.min(Number(e[0]),Number(e[1]))
    maxHeating1 = Math.max(Number(e[0]),Number(e[1]))

    updategraphHeating(1)

}

const UpdateHeating2 = (e,id) => {

   minHeating2 = Math.min(Number(e[0]),Number(e[1]))
   maxHeating2 = Math.max(Number(e[0]),Number(e[1]))
   updategraphHeating(2)

  }

  const UpdateHeating3 = (e,id) => {
     minHeating3 = Math.min(Number(e[0]),Number(e[1]))
   maxHeating3 = Math.max(Number(e[0]),Number(e[1]))
   updategraphHeating(3)
  }

    const marks = {
      0: '0h',
      360: '6h',
      720: '12h',
      1080: '18h',
      1440: '24h',
    };


    const marksvertical ={
      0: '0',
      2: '2',
      4: '4',
      6: '6',
      8: '8',
10: '10',
12:'12' ,
14: '14' ,
16:'16' ,
      
    };
  
  const wrapperStyle = { width: 400, margin: 150 };

  //Load Graph
//https://www.creative-tim.com/learning-lab/tailwind/nextjs/chartjs/notus
  React.useEffect(() => {
    var config = {
      type: "line",
      data: {
        labels: labelX,
        datasets: [
          {
            label: "Load Profile",
            backgroundColor: "rgba(54, 200, 243, 0.1)",
            borderColor: "#36C8F3",
            data: [0, 1, 6, 4, 5, 6, 5],
            fill: true,
            pointRadius: 1,
          },
          {
            //label: new Date().getFullYear() - 1,
            label: "Production Profile",
            fill: false,
            backgroundColor: "rgba(254, 149, 29, 0.1)",
            //            backgroundColor: "#edf2f7",
            borderColor: "#FE941D",
            data: [0, 0, 0, 0, 0, 0, 0],
            pointRadius: 1,
          },
        ],
      },
      options: {
        maintainAspectRatio: false,
        responsive: true,
        title: {
          display: false,
          text: "Load profile",
          fontColor: "grey",
        },
        legend: {
          display: true,
          labels: {
            fontColor: "grey",
          },
          align: "end",
          position: "bottom",
        },
        tooltips: {
          mode: "index",
          intersect: false,
        },
        hover: {
          mode: "nearest",
          intersect: true,
        },
        scales: {
          xAxes: [
            {
              ticks: {
                fontColor: "rgba(255,255,255,.7)",
              },
              display: true,
              scaleLabel: {
                display: false,
                labelString: "Minute",
                fontColor: "grey",
              },
              gridLines: {
                display: false,
                borderDash: [2],
                borderDashOffset: [2],
                color: "rgba(33, 37, 41, 0.3)",
                zeroLineColor: "rgba(0, 0, 0, 0)",
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2],
              },
            },
          ],
          yAxes: [
            {
              ticks: {
                fontColor: "rgba(255,255,255,.7)",
              },
              display: true,
              scaleLabel: {
                display: false,
                labelString: "Value",
                fontColor: "white",
              },
              gridLines: {
                borderDash: [3],
                borderDashOffset: [3],
                drawBorder: false,
                color: "rgba(255, 255, 255, 0.15)",
                zeroLineColor: "rgba(33, 37, 41, 0)",
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2],
              },
            },
          ],
        },
      },
    };
    var ctx = document.getElementById("line-chart").getContext("2d");
    window.myLine = new Chart(ctx, config);
    myLine.config._config.options.scales.yAxes.title={display:true, text:"Power (W)"}
    myLine.update()
  }, []);


  //Temperature Graph
//https://www.creative-tim.com/learning-lab/tailwind/nextjs/chartjs/notus
React.useEffect(() => {
    var configheating = {
      type: "line",
      data: {
        labels: labelX,
        datasets: [
          {
            label: "Internal Temperature",
            backgroundColor: "rgba(54, 200, 243, 0.1)",
            borderColor: "#36C8F3",
            data: [0, 1, 6, 4, 5, 6, 5],
            fill: true,
            pointRadius: 1,
          },
          {
            //label: new Date().getFullYear() - 1,
            label: "Outside Temperature",
            fill: false,
            backgroundColor: "rgba(254, 149, 29, 0.1)",
            //            backgroundColor: "#edf2f7",
            borderColor: "#FE941D",
            data: [0, 0, 0, 0, 0, 0, 0],
            pointRadius: 1,
          },
        ],
      },
      options: {
        maintainAspectRatio: false,
        responsive: true,
        title: {
          display: false,
          text: "Load profile",
          fontColor: "grey",
        },
        legend: {
          display: true,
          labels: {
            fontColor: "grey",
          },
          align: "end",
          position: "bottom",
        },
        tooltips: {
          mode: "index",
          intersect: false,
        },
        hover: {
          mode: "nearest",
          intersect: true,
        },
        scales: {
          xAxes: [
            {
              ticks: {
                fontColor: "rgba(255,255,255,.7)",
              },
              display: true,
              scaleLabel: {
                display: false,
                labelString: "Minute",
                fontColor: "grey",
              },
              gridLines: {
                display: false,
                borderDash: [2],
                borderDashOffset: [2],
                color: "rgba(33, 37, 41, 0.3)",
                zeroLineColor: "rgba(0, 0, 0, 0)",
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2],
              },
            },
          ],
          yAxes: [
            {
              ticks: {
                fontColor: "rgba(255,255,255,.7)",
              },
              display: true,
              scaleLabel: {
                display: false,
                labelString: "Value",
                fontColor: "white",
              },
              gridLines: {
                borderDash: [3],
                borderDashOffset: [3],
                drawBorder: false,
                color: "rgba(255, 255, 255, 0.15)",
                zeroLineColor: "rgba(33, 37, 41, 0)",
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2],
              },
            },
          ],
        },
      },
    };
    var ctxheating = document.getElementById("line-chart-heating").getContext("2d");
    window.myLineheating = new Chart(ctxheating, configheating);
    myLineheating.data.datasets[0].data = temperatureExterieur
    myLineheating.data.datasets[1].data = temperatureExterieur
    myLineheating.config._config.options.scales.yAxes.title={display:true, text:"Temperature (degre C)"}

    myLineheating.update()
  }, []);


  // 30 min basis graph
//https://www.creative-tim.com/learning-lab/tailwind/nextjs/chartjs/notus
React.useEffect(() => {
    var config30min = {
      type: "line",
      data: {
        labels: labelX_30min,
        datasets: [
          {
            label: "Load Profile",
            backgroundColor: "rgba(54, 200, 243, 0.1)",
            borderColor: "#36C8F3",
            data: [0, 1, 6, 4, 5, 6, 5],
            fill: true,
            pointRadius: 1,
            yAxisID: 'yAxes',

          },
          {
            //label: new Date().getFullYear() - 1,
            label: "Production Profile",
            fill: false,
            backgroundColor: "rgba(254, 149, 29, 0.1)",
            //            backgroundColor: "#edf2f7",
            borderColor: "#FE941D",
            data: [0, 0, 0, 0, 0, 0, 0],
            pointRadius: 1,
            yAxisID: 'yAxes',
          },
          {
            //label: new Date().getFullYear() - 1,
            label: "National Electricity CO2 emissions",
            fill: false,
            backgroundColor: "rgba(150, 150, 150, 0.1)",
            //            backgroundColor: "#edf2f7",
            borderColor: "#CFCFCF",
            data: [0, 0, 0, 0, 0, 0, 0],
            pointRadius: 1,
            yAxisID: 'y1',
          },
          {
            //label: new Date().getFullYear() - 1,
            label: "Electricity price",
            fill: false,
            backgroundColor: "rgba(150, 150, 150, 0.1)",
            //            backgroundColor: "#edf2f7",
            borderColor: "#D0E3FF",
            data: [0, 0, 0, 0, 0, 0, 0],
            pointRadius: 1,
            yAxisID: 'y1',
          },
        ],
      },
      options: {
        maintainAspectRatio: true,
        responsive: true,
        title: {
          display: true,
          text: "Load profile with 30 min time interval",
          fontColor: "grey",
        },
        legend: {
          display: true,
          labels: {
            fontColor: "grey",
          },
          align: "end",
          position: "bottom",
        },
        tooltips: {
          mode: "index",
          intersect: false,
        },
        hover: {
          mode: "nearest",
          intersect: true,
        },
        scales: {
          x: [
            {
              ticks: {
                fontColor: "rgba(255,255,255,.7)",
              },
              display: true,
              scaleLabel: {
                display: true,
                labelString: "Minute",
                fontColor: "grey",
              },
              gridLines: {
                display: false,
                borderDash: [2],
                borderDashOffset: [2],
                color: "rgba(33, 37, 41, 0.3)",
                zeroLineColor: "rgba(0, 0, 0, 0)",
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2],
              },
            },
          ],
          yAxes: [
            {title:{
              display:true,
              text:"Value (kWh)",
            },
              ticks: {
                fontColor: "rgba(255,255,255,.7)",
              },
              display: true,
              scaleLabel: {
                display: false,
                labelString: "Value (kWh)",
                fontColor: "black",
              },
              gridLines: {
                borderDash: [3],
                borderDashOffset: [3],
                drawBorder: true,
                color: "rgba(255, 255, 255, 0.15)",
                zeroLineColor: "rgba(33, 37, 41, 0)",
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2],
              },
            },
          ],
          y1:{title:{
            display:true,
            text:"price (€/MWh) and gCO2/kWh",
          },
            // stacked: false,
            position: 'right',
            grid: {
              drawOnChartArea: false, // only want the grid lines for one axis to show up
            },
          }
        },
      },
    };



// Chart.register(zoomPlugin);

    var ctx30min = document.getElementById("line-chart-30min").getContext("2d");
    window.myLine30min = new Chart(ctx30min, config30min);
    myLine30min.data.datasets[0].data = power_30min
    myLine30min.data.datasets[2].data = CO2emissions
    myLine30min.data.datasets[3].data = GridPrice
    myLine30min.config._config.options.scales.yAxes.title={display:true, text:"Energy Consumption per 30 min (Wh)"}
// // console.log(GridPrice)
    myLine30min.update()
  }, []);


  // Community 30 min basis graph
//https://www.creative-tim.com/learning-lab/tailwind/nextjs/chartjs/notus
React.useEffect(() => {
  var config30minCommunity = {
    type: "line",
    data: {
      labels: labelX_30min,
      datasets: [
        {
          label: "Load Profile Community",
          backgroundColor: "rgba(54, 200, 243, 0.1)",
          borderColor: "#36C8F3",
          data: [0, 1, 6, 4, 5, 6, 5],
          fill: true,
          pointRadius: 1,
        },
        {
          //label: new Date().getFullYear() - 1,
          label: "Production Profile Community",
          fill: false,
          backgroundColor: "rgba(254, 149, 29, 0.1)",
          //            backgroundColor: "#edf2f7",
          borderColor: "#FE941D",
          data: [0, 0, 0, 0, 0, 0, 0],
          pointRadius: 1,
        },
      ],
    },
    options: {
      maintainAspectRatio: true,
      responsive: true,
      title: {
        display: true,
        text: "Load profile with 30 min time interval",
        fontColor: "grey",
      },
      legend: {
        display: true,
        labels: {
          fontColor: "grey",
        },
        align: "end",
        position: "bottom",
      },
      tooltips: {
        mode: "index",
        intersect: false,
      },
      hover: {
        mode: "nearest",
        intersect: true,
      },
      scales: {
        xAxes: [
          {
            ticks: {
              fontColor: "rgba(255,255,255,.7)",
            },
            display: true,
            scaleLabel: {
              display: true,
              labelString: "Minute",
              fontColor: "grey",
            },
            gridLines: {
              display: false,
              borderDash: [2],
              borderDashOffset: [2],
              color: "rgba(33, 37, 41, 0.3)",
              zeroLineColor: "rgba(0, 0, 0, 0)",
              zeroLineBorderDash: [2],
              zeroLineBorderDashOffset: [2],
            },
          },
        ],
        yAxes: [
          {title:{
            display:true,
            text:"Value (kWh)",
          },
            ticks: {
              fontColor: "rgba(255,255,255,.7)",
            },
            display: true,
            scaleLabel: {
              display: false,
              labelString: "Value (kWh)",
              fontColor: "black",
            },
            gridLines: {
              borderDash: [3],
              borderDashOffset: [3],
              drawBorder: true,
              color: "rgba(255, 255, 255, 0.15)",
              zeroLineColor: "rgba(33, 37, 41, 0)",
              zeroLineBorderDash: [2],
              zeroLineBorderDashOffset: [2],
            },
          },
        ],
      },
    },
  };



// Chart.register(zoomPlugin);

  var ctx30minCommunity = document.getElementById("line-chart-30min-Community").getContext("2d");
  window.myLine30minCommunity = new Chart(ctx30minCommunity, config30minCommunity);
  myLine30minCommunity.data.datasets[0].data = consumption_30minCommunity
  myLine30minCommunity.config._config.options.scales.yAxes.title={display:true, text:"Energy Consumption per 30 min (Wh)"}

  myLine30minCommunity.update()
}, []);



  //send data to server
  const [data_community, setdatacommunity] = useState([])
  const [data_individual, setdataindiv] = useState([])

  const fetchdatacommunity = async () => {
    const response = await fetch('/api')
    const datacommunity = await response.json()
    setdatacommunity(datacommunity)
  }


  const submitdataindiv = async () => {
    //setdataindiv(LoadConsumptiontotal)
    // console.log(data_individual)
    // console.log("hello")
    // console.log(LoadConsumptiontotal)

    const response = await fetch('/api', {
      method: 'POST',
      body: JSON.stringify({LoadConsumptiontotal}),
      headers: {
        'Content-Type': 'application/json'
      }
    })
    const data = await response.json()
    // console.log(data)
    // console.log(data_individual)

  }
  var identifiant = ""

  function getVal(e) {
    //const val = document.querySelector('input').value;
    // // console.log(e)

  }

  var identificateur = ""

  function postfunction(){
    var ajax = new XMLHttpRequest()
    var jsondata =[]
    ajax.onreadystatechange = function() {
      if (ajax.readyState == XMLHttpRequest.DONE) {
          
        console.log(ajax.responseText)
        console.log("1")
        jsondata = ajax.responseText
        console.log(jsondata)
        console.log(jsondata.length)
        if (jsondata.length > 0) {
          jsondata = JSON.parse(JSON.parse(ajax.responseText))
          // jsondataNew = JSON.parse(jsondata)
          console.log(jsondata)
          // console.log(jsondata.consumption)

          if (jsondata != 'UNDEFINED'){
            consumption_30minCommunity = jsondata.consumption
            production_30minCommunity = jsondata.production
            console.log("la");
            // console.log(jsondata)
          } 
          
          
          
          
          console.log('The array is not empty');
        } else {
          console.log('The array is empty');
        }
        
      }
      // console.log("here");
      // console.log(jsondata)
      // console.log(consumption_30minCommunity);
     // // console.log(ajax)
      myLine30minCommunity.data.datasets[0].data = consumption_30minCommunity
      myLine30minCommunity.data.datasets[1].data = production_30minCommunity
      NumberCommunityMembers = jsondata.numberofusers
      myLine30minCommunity.update()
      //NumberofCommunityMembers.innerHTML = NumberCommunityMembers;

      // console.log("ici");
      console.log(jsondata.consumption)
console.log(NumberCommunityMembers)
displaycommunitymembers.innerHTML=NumberCommunityMembers;

  }


    var data = LoadConsumptiontotal
   // var formdata = new FormData(data)
    ajax.open("POST", "/api", true);
    // const datajson =  JSON.stringify({id:identificateur, consumption: LoadConsumptiontotal, production: DER_Curve})
    const datajson =  JSON.stringify({id:identificateur, consumption: LoadConsumptiontotal, production: DER_Curve, pricebid1: price1, pricebid2: price2, pricebid3: price3, pricebid4: price4, pricebid5: price5, pricebid6: price6,numberoftrialsleft:10})
    ajax.send(datajson);
    // // console.log(a)
    // // console.log(ajax.responseType)
    // // console.log(ajax.timeout)
    // // console.log(ajax.HEADERS_RECEIVED)
    // // console.log(ajax.response)

    // // console.log(ajax)
    //document.getElementById("divID").innerHTML += "POSTED";
  }




  
  const registerUser = async event => {
    event.preventDefault()
    identificateur = event.target.name.value
    // console.log(identificateur) // don't redirect the page
    // where we'll add our form logic
    // // console.log(myLine30min)
    // myLine30min.config._config.options.scales.yAxes.title={display:true, text:"Values (kWh)"}
    // // console.log(myLine30min.config._config.options.scales.yAxes.title) 
    // myLine30min.update()
}

const selectWind = async event => {
  event.preventDefault()
  // identificateur = event.target.name.value
  // console.log("Wind") // don't redirect the page
  // where we'll add our form logic
  DER_Curve =  data_wind.map(function(x) { return x * PowerWind; });
  myLine.data.datasets[1].data = DER_Curve
//// console.log(myLine.data)
// myLine.destroy()
myLine.update()
updategraph30min()
}

const selectPV = async event => {
  event.preventDefault()
  // identificateur = event.target.name.value
  // console.log("PV") // don't redirect the page
  DER_Curve = data_solaire.map(function(x) { return x * PowerPV; });
  myLine.data.datasets[1].data =  DER_Curve
//// console.log(myLine.data)
// myLine.destroy()
myLine.update()  // where we'll add our form logic
updategraph30min()
colorA = '#ABE2FB' 
colorB = '#FBDDAB'
}

// verticalA.childNodes[1].childNodes[1].setAttribute("style","background-color:red;bottom:0%;top:auto;height:62.5%")
// // console.log(verticalA.childNodes[1].childNodes[1])
// // verticalA.style.color="#FF0000"
// }

const selectNone = async event => {
    event.preventDefault()
    // console.log("No DER") // don't redirect the page
      myLine.data.datasets[1].data = list
      DER_Curve = list
  myLine.update()  // where we'll add our form logic
  updategraph30min()
  colorB = '#ABE2FB' 
colorA = '#FBDDAB'
// verticalA.childNodes[1].childNodes[1].setAttribute("style","background-color:blue;bottom:0%;top:auto;height:62.5%")

// // console.log(verticalA.childNodes[1].childNodes[1])

  }

function logPowerHeating1(value) {
    // console.log(value); //eslint-disable-line
    DC_Heating1 = value
    updategraphHeating(1)
  }
  function logPowerHeating2(value) {
    // console.log(value); //eslint-disable-line
    DC_Heating1 = value
    updategraphHeating(2)
  }
  function logPowerHeating3(value) {
    // console.log(value); //eslint-disable-line
    DC_Heating1 = value
    updategraphHeating(3)
  }


function   updategraph30min(){
    let j = 0
  let counter = 1
  power_30min[j] =0
    for (let i = 0; i < 1440; i++) {
      if (counter===30){
          counter =0
          j+=1
          power_30min[j] =0
      }
      power_30min[j] += LoadConsumptiontotal[i]/60 // /60 because we use 30 min data. so power --> energy conversion
      counter +=1
  }
    let DER_30min = []
for (let i = 0;i<=48; i++) {
    DER_30min.push(DER_Curve.slice(i*30,(i+1)*30).reduce((a, b) => a + b, 0)/60)
}
myLine30min.data.datasets[0].data = power_30min
myLine30min.data.datasets[1].data = DER_30min
myLine30min.update()
let importation = power_30min
importation = importation.map(function(x, index){ //here x = power_30min[index]
    return Math.max(0,x - DER_30min[index]) 
   });
  //  // console.log(importation)
 //importation.reduce(function(r,a,i){let emissions = r+a*CO2emissions[i]; return(emissions)},0)
 let sommeemissons = 0;
 for(let i=0; i< CO2emissions.length; i++) {
   sommeemissons += CO2emissions[i]*importation[i]/1000;
 }

 let totalcost = 0;
for(let i=0; i< GridPrice.length; i++) {
  totalcost += GridPrice[i]*importation[i]/1000000*365;
}

display.innerHTML = Math.round(sommeemissons) + " gCO2/day"
displayNeeds.innerHTML="Green when needs are fulfilled "
displaycost.innerHTML="Annual electricity bill: " + Math.round(totalcost) + "€" 

checkhouseholdneeds()
// updatecolorvertical()
// // console.log("hre")
}











































const selecthouseholdStudent = async event => {
  event.preventDefault()
  // console.log("Household1") // don't redirect the page
   timeHeating1a = 6
   timeHeating1b = 8
   timeHeating2a = 17.5
   timeHeating2b = 23
   timeHeating3a = 0
   timeHeating3b = 0
   timeHeating4a = 0
   timeHeating4b = 0
   TemperatureLimitlow1 = 20
   TemperatureLimitlow2 = 20
   TemperatureLimitlow3 = 18
   TemperatureLimitlow4 = 18
  
   timeCooking1a = 7
   timeCooking1b = 8
   timeCooking2a = 19
   timeCooking2b = 22
   timeCooking3a = 0
   timeCooking3b = 0
   DurationCooking1 = 20
   DurationCooking2 = 45
   timeBoiling1a = 0
   Temperaturewater = 35
  
  //  timeEV1a = 0
  //  timeEV1b = 0
  timeimpossiblecharge1 = 8*60
  timeimpossiblecharge2 = 17*60
   EVChargeNeed = 15*60*1000 //kWh
   checkhouseholdneeds()
}


const selecthouseholdElderly = async event => {
  event.preventDefault()
  // console.log("Household2") // don't redirect the page
   timeHeating1a = 6
   timeHeating1b = 22
   timeHeating2a = 0
   timeHeating2b = 0
   timeHeating3a = 0
   timeHeating3b = 0
   timeHeating4a = 0
   timeHeating4b = 0
   TemperatureLimitlow1 = 19.5
   TemperatureLimitlow2 = 20
   TemperatureLimitlow3 = 18
   TemperatureLimitlow4 = 18
  
   timeCooking1a = 11
   timeCooking1b = 12.5
   timeCooking2a = 18
   timeCooking2b = 19
   timeCooking3a = 0
   timeCooking3b = 0
   DurationCooking1 = 45
   DurationCooking2 = 45
   timeBoiling1a = 0
   Temperaturewater = 35
  
  //  timeEV1a = 0
  //  timeEV1b = 0
  timeimpossiblecharge1 = 0
  timeimpossiblecharge2 = 0*60
   EVChargeNeed = 5*60*1000 //kWh
   checkhouseholdneeds()
}

const selecthouseholdFamily = async event => {
  event.preventDefault()
  // console.log("Household3") // don't redirect the page
   timeHeating1a = 6
   timeHeating1b = 8
   timeHeating2a = 17
   timeHeating2b = 22.5
   timeHeating3a = 0
   timeHeating3b = 0
   timeHeating4a = 0
   timeHeating4b = 0
   TemperatureLimitlow1 = 19.5
   TemperatureLimitlow2 = 20
   TemperatureLimitlow3 = 18
   TemperatureLimitlow4 = 18
  
   timeCooking1a = 6.5
   timeCooking1b = 8
   timeCooking2a = 17.5
   timeCooking2b = 20.5
   timeCooking3a = 0
   timeCooking3b = 0
   DurationCooking1 = 30
   DurationCooking2 = 70
   timeBoiling1a = 0
   Temperaturewater = 35
  
  //  timeEV1a = 0
  //  timeEV1b = 0
  timeimpossiblecharge1 = 8*60
  timeimpossiblecharge2 = 17*60
   EVChargeNeed = 15*60*1000 //kWh
   checkhouseholdneeds()
}

function checkhouseholdneeds(){
  needsfilled = 1
    // Check heating time
let extracttemperature = []
extracttemperature = temperature.slice(timeHeating1a*60,timeHeating1b*60)
if (Math.min(...extracttemperature)<TemperatureLimitlow1){
  needsfilled = 0
  // // console.log("min temp 1")

  // // console.log(Math.min(...extracttemperature))

}
extracttemperature = temperature.slice(timeHeating2a*60,timeHeating2b*60)
if (Math.min(...extracttemperature)<TemperatureLimitlow2){
  needsfilled = 0
  // // console.log("min temp 2")
  // // console.log(Math.min(...extracttemperature))

}
extracttemperature = temperature.slice(timeHeating3a*60,timeHeating3b*60)
if (Math.min(...extracttemperature)<TemperatureLimitlow3){
  needsfilled = 0
}
extracttemperature = temperature.slice(timeHeating4a*60,timeHeating4b*60)
if (Math.min(...extracttemperature)<TemperatureLimitlow4){
  needsfilled = 0
}
  // for (var i = timeHeating1a*60; i< timeHeating1b*60; i++){
  //   if (temperature[i]<TemperatureLimitlow1){
  //     needsfilled = 0
  //   }
  // }
//   for (var i = timeHeating2a*60; i< timeHeating2b*60; i++){
//     if (temperature[i]<TemperatureLimitlow2){
//       needsfilled = 0
//     }

//   }
//   let extracttemperature = temperature.slice(timeHeating2a*60,timeHeating2b*60)
// // console.log("Hello")
// // console.log(Math.min(...extracttemperature))

  // for (var i = timeHeating3a*60*60; i< timeHeating3b*60; i++){
  //   if (temperature[i]<TemperatureLimitlow3){
  //     needsfilled = 0
  //   }
  // }

  // for (var i = timeHeating4a*60; i< timeHeating4b*60; i++){
  //   if (temperature[i]<TemperatureLimitlow4){
  //     needsfilled = 0
  //   }
  // }
  // Check cooking time
let sumtimecooking = 0
  for (var i = timeCooking1a*60; i< timeCooking1b*60; i++){
    if (CookingPlateLoadCurve[i]>0.1) {
      sumtimecooking +=1
    }
  }
    if (sumtimecooking<DurationCooking1/2){
      needsfilled = 0
    }

    sumtimecooking = 0
  for (var i = timeCooking2a*60; i< timeCooking2b*60; i++){
    if (CookingPlateLoadCurve[i]>0.1) {
      sumtimecooking +=1
    }
  }
    if (sumtimecooking<DurationCooking2/2){
      needsfilled = 0
    }

//EVChange
    let EVCharge = 0
    for (var i=0;i<EVLoadCurve.length;i++){
      EVCharge += EVLoadCurve[i];
    }
if (EVCharge<EVChargeNeed){
  needsfilled = 0 
}


for (var i=timeimpossiblecharge1;i<timeimpossiblecharge2;i++){
  if (EVLoadCurve[i] >= 1){
    needsfilled = 0   
  }
}

// // console.log("booleen:")
//     // console.log(needsfilled)
if (needsfilled <0.5){
  displayNeeds.innerHTML="Red when needs are not fulfilled "
  displayNeeds.style.background= '#FF0000';
  // console.log("red here")
}else {
  displayNeeds.innerHTML="Green when needs are fulfilled "

  displayNeeds.style.background= '#00FF00';
  // console.log("green here")


}


}




function updategraphCooking(cooking_id){
  LoadConsumptiontotal = diffArray(LoadConsumptiontotal,CookingPlateLoadCurve)
     CookingPlateLoadCurve = [];
   for (var i = 0; i <= 1440; i++) {
    CookingPlateLoadCurve.push(0);
   }
   for (var i = minrangeCooking1; i < maxrangeCooking1; i++) {
    CookingPlateLoadCurve[i] = tempprofileCooking[i];
    }

  for (var i = minrangeCooking2; i <= maxrangeCooking2; i++) {
      CookingPlateLoadCurve[i] = tempprofileCooking[i];
  }


  if (cooking_id===1){
   for (var i = minrangeCooking1; i < maxrangeCooking1; i++) {
    CookingPlateLoadCurve[i] = dataplates[i];
    }
  }else if (cooking_id===2){
    for (var i = minrangeCooking2; i <= maxrangeCooking2; i++) {
      CookingPlateLoadCurve[i] = dataplates[i];
      }
    }
    tempprofileCooking = CookingPlateLoadCurve
      CookingPlateLoadCurve = CookingPlateLoadCurve.map(function(x) {return x*PowerCooking})
      myLine.data.labels = labelX 
  //  LoadConsumptiontotal = CookingPlateLoadCurve.map(function (num, idx) {
  //   return num + HeatingLoadCurve[idx];
  // }); 
  LoadConsumptiontotal = sumArray(LoadConsumptiontotal,CookingPlateLoadCurve)
  myLine.data.datasets[0].data = LoadConsumptiontotal
  myLine.update()
    updategraph30min()
  
  }

  //EVChange
  function updategraphEV(EV_id){
    LoadConsumptiontotal = diffArray(LoadConsumptiontotal,EVLoadCurve)
    EVLoadCurve = [];
     for (var i = 0; i <= 1440; i++) {
      EVLoadCurve.push(0);
     }
     let EVpower = 3700
     let totalenergyEV = 0;
     for (var i = Math.min(minrangeEV1,minrangeEV2); i < Math.min(maxrangeEV1,maxrangeEV2); i++) {
      if (totalenergyEV>=EVChargeNeed){
        EVpower = 0;
      }
      EVLoadCurve[i] = EVpower;
      totalenergyEV +=  EVLoadCurve[i];
      }
    // for (var i = minrangeEV2; i <= maxrangeEV2; i++) {
    //   EVLoadCurve[i] = 3700;
    // }
    for (var i = Math.max(minrangeEV1,minrangeEV2); i < Math.max(maxrangeEV1,maxrangeEV2); i++) {
      if (totalenergyEV>=EVChargeNeed){
        EVpower = 0;
      }
      EVLoadCurve[i] = EVpower;
      totalenergyEV +=  EVLoadCurve[i];
      }  
  
    // if (EV_id===1){
    //  for (var i = minrangeCooking1; i < maxrangeCooking1; i++) {
    //   CookingPlateLoadCurve[i] = dataplates[i];
    //   }
    // }else if (EV_id===2){
    //   for (var i = minrangeCooking2; i <= maxrangeCooking2; i++) {
    //     CookingPlateLoadCurve[i] = dataplates[i];
    //     }
    //   }
    //   tempprofileCooking = CookingPlateLoadCurve
    // EVLoadCurve = EVLoadCurve.map(function(x) {return x*PowerCooking})
        myLine.data.labels = labelX 
    //  LoadConsumptiontotal = CookingPlateLoadCurve.map(function (num, idx) {
    //   return num + HeatingLoadCurve[idx];
    // }); 
    LoadConsumptiontotal = sumArray(LoadConsumptiontotal,EVLoadCurve)
    myLine.data.datasets[0].data = LoadConsumptiontotal
    myLine.update()
      updategraph30min()
    
    }







    function download_csv_file() {  
  
      //define the heading for each row of the data  
      var csv = 'time,consumption (W),production (w)\n';  
        let countiter = 0;
      for (const element of labelX) {
        csv += labelX[countiter]+"," + LoadConsumptiontotal[countiter]+","+DER_Curve[countiter]+"\n"
        countiter +=1;
      }

      //merge the data with CSV  
      // csv+=LoadConsumptiontotal;
      // LoadConsumptiontotal.forEach(function(row) {  
      //         csv += row.join(',');  
      //         csv += "\n";  
      // });  
     
      //display the created CSV data on the web browser   
      //document.write(csv);  
    
       
      var hiddenElement = document.createElement('a');  
      hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);  
      hiddenElement.target = '_blank';  
        
      //provide the name for the CSV file to be downloaded  
      hiddenElement.download = 'IndividualFile.csv';  
      hiddenElement.click();  
  }  




  

  function download_csv_fileCommunity() {  
  
    //define the heading for each row of the data  
    var csv = 'time, Community consumption (W),Community production (w)\n';  
      let countiter = 0;
    for (const element of labelX_30min) {
      csv += labelX_30min[countiter]+"," + consumption_30minCommunity[countiter]+","+production_30minCommunity[countiter]+"\n"
      countiter +=1;
    }

    //merge the data with CSV  
    // csv+=LoadConsumptiontotal;
    // LoadConsumptiontotal.forEach(function(row) {  
    //         csv += row.join(',');  
    //         csv += "\n";  
    // });  
   
    //display the created CSV data on the web browser   
    //document.write(csv);  
  
     
    var hiddenElement = document.createElement('a');  
    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);  
    hiddenElement.target = '_blank';  
      
    //provide the name for the CSV file to be downloaded  
    hiddenElement.download = 'CommunityFile.csv';  
    hiddenElement.click();  
}  

































  function updategraphHeating(heating_id){
    LoadConsumptiontotal = diffArray(LoadConsumptiontotal,HeatingLoadCurve)

    let dataheating = []
    // console.log(Math.trunc(limitheating*DC_Heating1/100))
  let count1 = 0
   let valeur = 1
   for (var i = 0; i <= 1440; i++) {
     if(count1 === Math.trunc(limitheating*DC_Heating1/100)){
      valeur = 0 //Math.abs(valeur-1)
     }
     if(count1 >= limitheating+1){
      valeur = 1//Math.abs(valeur-1)
      count1 = -1
     }
  
     dataheating.push(valeur);
     count1+=1
   }
   HeatingLoadCurve = [];
   for (var i = 0; i <= 1440; i++) {
    HeatingLoadCurve.push(0);
   }
   for (var i = minHeating1; i < maxHeating1; i++) {
    HeatingLoadCurve[i] = tempprofileHeating[i];
    }

  for (var i = minHeating2; i <= maxHeating2; i++) {
      HeatingLoadCurve[i] = tempprofileHeating[i];
  }

    for (var i = minHeating3; i <= maxHeating3; i++) {
      HeatingLoadCurve[i] = tempprofileHeating[i];
      }
    
  if (heating_id===1){
   for (var i = minHeating1; i < maxHeating1; i++) {
    HeatingLoadCurve[i] = dataheating[i];
    }
  }else if (heating_id===2){
    for (var i = minHeating2; i <= maxHeating2; i++) {
      HeatingLoadCurve[i] = dataheating[i];
      }
    }else if (heating_id===3){
    for (var i = minHeating3; i <= maxHeating3; i++) {
      HeatingLoadCurve[i] = dataheating[i];
      }
    }
  
      for (var i = 0; i < 1440; i++) {
          let period = 20

          let TemperatureHeating = 800;//30;
          let alpha1 = 0.8;
          let alpha2 = 0.01;
          let alpha3 =alpha1/100;
          var averagedata = HeatingLoadCurve.slice(i-Math.min(i+1,period),i).reduce((a, b) => a + b, 0)/Math.min(i+1,period)
          if (i < period)
          {
            averagedata = HeatingLoadCurve[i];
          }
          temperature[i+1] = Math.max(temperatureExterieur[i],Math.min(temperature[i] + (HeatingLoadCurve[i]*2-1)*Delta/50*Math.abs(temperature[i]-temperatureExterieur[i+1])+Delta/70*averagedata*Math.abs(temperature[i]-temperatureExterieur[i]),temperaturemax)) //*Math.abs(temperature[i]-temperatureExterieur[i])
          temperature[i+1] = (1-alpha3)*temperature[i]+alpha2/30*averagedata*TemperatureHeating+(alpha3)*temperatureExterieur[i+1]
          // temperature[i+1] = (alpha1)*temperature[i]+(alpha2/30*averagedata)*TemperatureHeating+(1-alpha3)*temperatureExterieur[i+1]
        }
      tempprofileHeating = HeatingLoadCurve
      
      HeatingLoadCurve = HeatingLoadCurve.map(function(x) {return x*PowerHeating})
      myLine.data.labels = labelX 
  //  LoadConsumptiontotal = HeatingLoadCurve.map(function (num, idx) {
  //   return num + CookingPlateLoadCurve[idx];
  // }); 
  LoadConsumptiontotal = sumArray(LoadConsumptiontotal,HeatingLoadCurve)

  myLine.data.datasets[0].data = LoadConsumptiontotal
  myLine.update()
  myLineheating.data.datasets[0].data = temperature  
  myLineheating.update()
updategraph30min()
}



const handleslider = props => {
  const { value, dragging, index, ...restProps } = props;
  return (
    <SliderTooltip
      prefixCls="rc-slider-tooltip"
      overlay={`${value} %`}
      visible={dragging}
      placement="top"
      key={index}
    >
      <Handle value={value} {...restProps} />
    </SliderTooltip>
  );
};


//https://www.the-art-of-web.com/html/input-field-uppercase/
const lowertext = e =>   {
  var start = e.target.selectionStart;
  var end = e.target.selectionEnd;
  e.target.value = e.target.value.toLowerCase();
  e.target.setSelectionRange(start, end);
}



  
   return (

<div className="container">



    <div className="container">
      <div className="row">
        <h1>Household electric consumption study</h1>
        <p>The aim is to understand what domestic electric consumption profiles look like, and how it can be improved.</p>
      </div>
      <p>Follow insructions below, and do not reload the page unless necessary.</p>
    </div>



      <div className="container">

      <div className="row">

          <form action="#" onSubmit={registerUser}>
            <label htmlFor="name">Name</label>
            <input id="name" onKeyUp={lowertext} type="text" autoComplete="name" required />
            <button className="btn btn-primary m-3" type="submit">Register (mandatory) </button>
          </form>


          </div>

          <div className="row">
          <form action="#" >
            <label htmlFor="Household">What type of household do you represent ? </label>
            <button className="btn btn-primary m-3" type="submit" onClick={selecthouseholdStudent}>Student</button>
            <button className="btn btn-primary m-3" type="submit" onClick={selecthouseholdElderly}>Elderly</button>
            <button className="btn btn-primary m-3" type="submit" onClick={selecthouseholdFamily}>Family</button>
          </form>
          </div>


          <div className="row">
          <form action="#" >
            <label htmlFor="DER">What Renewable Energy production do you own ? </label>
            <button className="btn btn-primary m-3" type="submit" onClick={selectPV}>PV</button>
            <button className="btn btn-primary m-3" type="submit" onClick={selectWind}>Wind</button>
            <button className="btn btn-primary m-3" type="submit" onClick={selectNone}>No DER</button>
          </form>
          </div>
          </div>
          <div className="container">
              <div className="row">
                  <h1> Environmental Impact </h1>
                  <div className="col">

                      <div><h4> Carbon footprint of current consumption profile: </h4></div>  
                  </div>
                  <div className="col">

                      <div className = "style1bold" id="display"></div>  
                  </div>
              </div>
          </div>


    <div className="container">
        <div className="row">
            <div className="col">
            <h1> Needs fulfilled ? </h1>
            </div>
            <div className="col">

                <div className = "style1bold" id="displayNeeds"></div>  
            </div>
        </div>  
    </div>

    <div className="container">
        <div className="row">
            <div className="col">
            <h1> Annual Cost of Energy consumption </h1>
            </div>
            <div className="col">
                <div className = "style1bold" id="displaycost"></div>  
            </div>
        </div>  
    </div>



    {/* <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div> */}

        <div className="container">
          <div className="row">
              <h1> Cooking Plates </h1>
            <div className="col">
            
              <p>Timing for use of cooking plates</p>
              <div className="col-sm">
            <div>

              <Range min={0} max={1440}  defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateCooking1} />

            </div>
            <div>

              <Range min={0} max={1440} marks={marks} defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateCooking2} />
              </div>
              </div>

            </div>
          </div>
          
        </div>



      {/* EVChange */}

    <div className="container">
      <div className="row">
          <h1> Electric Vehicle </h1>
        <div className="col">
        
          <p>Timing for charge of electric vehicle</p>
          <div className="col-sm">
        <div>

          <Range min={0} max={1440}  defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateEV1} />

        </div>
        <div>

          <Range min={0} max={1440} marks={marks} defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateEV2} />
          </div>
          </div>

        </div>
      </div>
      
    </div>




<div className="container">
  <div className="row">
<h1> Heating </h1>
    <div className="col-sm">
      <h4>  heating time</h4>
    <div>
    <Range min={0} max={1440}  defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateHeating1} />
    </div>
    <div>
    <Range min={0} max={1440}  defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateHeating2} />
    </div>
    <div>
    <Range min={0} max={1440} marks={marks} defaultValue={[3, 30]} tipFormatter={value => `${Math.floor(value/60)}h${value % 60}`}  onAfterChange={UpdateHeating3} />
    </div>
    </div>
    <div className="col-sm">
    <h4>  heater power </h4>

    <Slider handle={handleslider} onAfterChange={logPowerHeating1} />
    <Slider handle={handleslider} onAfterChange={logPowerHeating2} />
    <Slider handle={handleslider} onAfterChange={logPowerHeating3} />

    </div>
</div>
</div>
<div className="container">
<h3> Inside Temperature :</h3>

{/* <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded bg-blueGray-700"> */}
    <div >
      {/* Chart */}
      <div className="chart-container" style={{ position: 'relative', left: 5+'%',  height:40+'vh', width:90+'%' }}>
        <canvas id="line-chart-heating"></canvas>
      </div>
    </div> 
  {/* </div> */}

</div>


<div className="container">


   <div> <button onClick={postfunction}>Submit data</button>
  
   {/* <!-- create an HTML button to download the CSV file on click -->   */}
<button onClick={download_csv_file}> Download CSV </button>  
  



</div>
</div>
<div className="container">
<h3> Household power profile (minutely) :</h3>

    <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded bg-blueGray-700">
        <div >
          {/* Chart */}
          <div className="chart-container" style={{ position: 'relative', left: 5+'%',  height:40+'vh', width:90+'%' }}>
            <canvas id="line-chart"></canvas>
          </div>
        </div> 
      </div>

  </div>
 


  
  <div className="container">
  <h3> Household load profile (30 minutes time intervals)</h3>

{/* <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded bg-blueGray-700"> */}
    <div >

      {/* Chart */}
      <div className="chart-container" style={{ position: 'relative', left: 5+'%',  height:40+'vh', width:90+'%' }}>
        <canvas id="line-chart-30min"></canvas>
      </div>
    </div> 
  {/* </div> */}

</div>
<div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>


        <div className="container">
        <div className="row">
            <div className="col">
            <h3>Members in the community</h3>
            </div>
            <div className="col">
                <h3 id="displaycommunitymembers"></h3>  
            </div>
        </div>  
    </div>

<div className="container">
<h3> Community 30 min Profile (consumption and production) </h3>

<button onClick={download_csv_fileCommunity}> Download CSV </button>  
  
{/* <div className="relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded bg-blueGray-700"> */}
    <div >
      {/* Chart */}
      <div className="chart-container" style={{ position: 'relative', left: 5+'%',  height:40+'vh', width:90+'%' }}>
        <canvas id="line-chart-30min-Community"></canvas>
      </div>
    </div> 
  {/* </div> */}




</div>



<div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>
        <div className="row example mb-3">
        </div>

{/* <div className="container">

<div className="row">
<h1> Price Trading </h1>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0-0:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical} id="verticalA">
        <p>0:30-1:00</p>
        <Slider vertical  min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} trackStyle={{ backgroundColor: 'blue' }} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>1-1:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>  
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0-0:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0:30-1:00</p>
        <Slider vertical id="verticalB" min={0} max={16} marks={marksvertical} step={2}  defaultValue={10}  />
      </div>
    </div>
    
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0-0:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0:30-1:00</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} trackStyle={{ backgroundColor: 'blue' }} />
      </div>
    </div>
    
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0-0:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0:30-1:00</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} trackStyle={{ backgroundColor: 'blue' }} />
      </div>
    </div>
    
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0-0:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0:30-1:00</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} trackStyle={{ backgroundColor: 'blue' }} />
      </div>
    </div>
    
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0-0:30</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} />
      </div>
    </div>
    <div className="col-sm">
    <div style = {stylevertical}>
        <p>0:30-1:00</p>
        <Slider vertical min={0} max={16} marks={marksvertical} step={2}  defaultValue={10} trackStyle={{ backgroundColor: 'blue' }} />
      </div>
    </div>
    
              
</div>




  </div> */}

  </div>
  );
}

export default Example